coefs <- coef(model)
r_squared <- summary(model)$r.squared
p_value <- summary(model)$coefficients[2,4]   # pull p.value from linear regression model
# Text: Create equation and R^2 text
equation <- paste0("y = ", round(coefs[2], 2), "x + ", round(coefs[1], 2))
r2_text <- paste0("italic(R)^2 == ", round(r_squared, 3))
p_text <- paste0("p-value = ", round(p_value, 3))
# Position: Get plotting ranges
max_x <- max(data[[predictor]], na.rm = TRUE)
max_y <- max(data[[response]], na.rm = TRUE)
min_y <- min(data[[response]], na.rm = TRUE)
range_y <- max_y - min_y
# Annotate sample size near the bottom-right
sample_size_y_position <- min_y + 0.08 * range_y
# Annotate equation and r2 near the top-right
p_y_position  <- min_y + 0.14 * range_y
eq_y_position <- min_y + 0.21 * range_y
r2_y_position <- min_y + 0.28 * range_y
# PLOT ------------------------------------------------------
ggplot(data, aes_string(x = predictor, y = response)) +
# Points
geom_point(color = color, size = 3, alpha = 0.75) +
# xlim(0, 100) +
# ylim(0, 100) +
theme_bw() +
# Line of best fit
geom_smooth(method = "lm", color = color) +
# Axes Label & Theme
labs(x = xlabel, y = ylabel) +  # Set the y-axis label
theme(
axis.title.y = element_text(size = 16),
axis.title.x = element_text(size = 16, color = color),
axis.text = element_text(size = 14)
) +
# Samples size text
annotate(
"text",
x = max_x,
y = sample_size_y_position,
label = paste("n = ", count(data)),
hjust = 1,
size = 6,
color = "black"
) +
# # Equation
# annotate(
#   "text",
#   x = max_x,
#   y = eq_y_position,
#   label = equation,
#   hjust = 1,
#   size = 4,
#   color = color
# ) +
# R^2 text
annotate(
"text",
x = max_x,
y = r2_y_position,
label = r2_text,
hjust = 1,
size = 5,
color = color,
parse = TRUE # Ensures that italics styling works
) +
# P value text
annotate(
"text",
x = max_x,
y = p_y_position,
label = p_text,
hjust = 1,
size = 5,
color = color
)
}
patterns_across_2025_trunk <- do_hypoth3_analysis(
data = health_assess_2025,
predictor = "trunk_canker_area",
response = "percent_live_canopy",
xlabel = "% of Trunk Canker Area",
ylabel = "% Live Canopy",
color = "#4285f4",
color_points = "seedling_y_n"
)
patterns_across_2025_trunk
library(tidyverse)
library(dplyr)
do_hypoth3_analysis <- function(data = combined_2024_2025, predictor, response, xlabel, ylabel, color = "black", color_points = "black") {
# Model: Define linear model
model <- lm(reformulate(predictor, response), data = data)
coefs <- coef(model)
r_squared <- summary(model)$r.squared
p_value <- summary(model)$coefficients[2,4]   # pull p.value from linear regression model
# Text: Create equation and R^2 text
equation <- paste0("y = ", round(coefs[2], 2), "x + ", round(coefs[1], 2))
r2_text <- paste0("italic(R)^2 == ", round(r_squared, 3))
p_text <- paste0("p-value = ", round(p_value, 3))
# Position: Get plotting ranges
max_x <- max(data[[predictor]], na.rm = TRUE)
max_y <- max(data[[response]], na.rm = TRUE)
min_y <- min(data[[response]], na.rm = TRUE)
range_y <- max_y - min_y
# Annotate sample size near the bottom-right
sample_size_y_position <- min_y + 0.08 * range_y
# Annotate equation and r2 near the top-right
p_y_position  <- min_y + 0.28 * range_y
# eq_y_position <- min_y + 0.21 * range_y
r2_y_position <- min_y + 0.21 * range_y
# PLOT ------------------------------------------------------
ggplot(data, aes_string(x = predictor, y = response)) +
# Points
geom_point(color = color, size = 3, alpha = 0.75) +
# xlim(0, 100) +
# ylim(0, 100) +
theme_bw() +
# Line of best fit
geom_smooth(method = "lm", color = color) +
# Axes Label & Theme
labs(x = xlabel, y = ylabel) +  # Set the y-axis label
theme(
axis.title.y = element_text(size = 16),
axis.title.x = element_text(size = 16, color = color),
axis.text = element_text(size = 14)
) +
# Samples size text
annotate(
"text",
x = max_x,
y = sample_size_y_position,
label = paste("n = ", count(data)),
hjust = 1,
size = 6,
color = "black"
) +
# # Equation
# annotate(
#   "text",
#   x = max_x,
#   y = eq_y_position,
#   label = equation,
#   hjust = 1,
#   size = 4,
#   color = color
# ) +
# R^2 text
annotate(
"text",
x = max_x,
y = r2_y_position,
label = r2_text,
hjust = 1,
size = 5,
color = color,
parse = TRUE # Ensures that italics styling works
) +
# P value text
annotate(
"text",
x = max_x,
y = p_y_position,
label = p_text,
hjust = 1,
size = 5,
color = color
)
}
patterns_across_2025_trunk <- do_hypoth3_analysis(
data = health_assess_2025,
predictor = "trunk_canker_area",
response = "percent_live_canopy",
xlabel = "% of Trunk Canker Area",
ylabel = "% Live Canopy",
color = "#4285f4",
color_points = "seedling_y_n"
)
patterns_across_2025_trunk <- do_hypoth3_analysis(
data = health_assess_2025,
predictor = "trunk_canker_area",
response = "percent_live_canopy",
xlabel = "% of Trunk Canker Area",
ylabel = "% Live Canopy",
color = "#4285f4",
color_points = "seedling_y_n"
)
patterns_across_2025_trunk
bar_seedlings <- health_assess_2025 %>% ggplot(aes(x = seedling_y_n)) +
geom_bar(aes(fill = seedling_y_n)) +
theme_bw() +
geom_text(stat = "count", aes(label = ..count..), vjust = -0.5, size = 8) +  # size 8 ≈ 24 pt
xlab("2025 Seedlings Y/N")
bar_seedlings
bar_seedlings <- health_assess_2025 %>% ggplot(aes(x = seedling_y_n)) +
geom_bar(aes(fill = seedling_y_n)) +
theme_bw() +
ylim(0, 90) +
geom_text(stat = "count", aes(label = ..count..), vjust = -0.5, size = 8) +  # size 8 ≈ 24 pt
xlab("2025 Seedlings Y/N")
bar_seedlings
total_individuals <- nrow(health_assess_2025)
site_bar <- health_assess_2025 %>%
ggplot(aes(x = site_name)) +
geom_bar(aes(fill = site_name)) +
ylim(0, 80) +
geom_text(stat = "count", aes(label = ..count..), vjust = -0.5, size = 8) +  # size 8 ≈ 24 pt
xlab("Trees surveyed in 2025 by Site") +
# ggtitle("Individuals per Site", subtitle = paste("Total individuals:", total_individuals)) +
theme_minimal(base_size = 24) +  # base text size
theme(
axis.text = element_text(size = 24),
axis.title = element_text(size = 24),
legend.text = element_text(size = 24),
legend.title = element_text(size = 24),
plot.title = element_text(size = 28, face = "bold"),
plot.subtitle = element_text(size = 24)
)+ theme(legend.position = "none")
site_bar
total_individuals <- nrow(health_assess_2025)
site_bar <- health_assess_2025 %>%
ggplot(aes(x = site_name)) +
geom_bar(aes(fill = site_name)) +
ylim(0, 80) +
geom_text(stat = "count", aes(label = ..count..), vjust = -0.5, size = 8) +  # size 8 ≈ 24 pt
xlab("Trees surveyed in 2025 by Site") +
ylab("Number of individuals assessed")
# ggtitle("Individuals per Site", subtitle = paste("Total individuals:", total_individuals)) +
theme_minimal(base_size = 24) +  # base text size
theme(
axis.text = element_text(size = 24),
axis.title = element_text(size = 24),
legend.text = element_text(size = 24),
legend.title = element_text(size = 24),
plot.title = element_text(size = 28, face = "bold"),
plot.subtitle = element_text(size = 24)
)+ theme(legend.position = "none")
site_bar
total_individuals <- nrow(health_assess_2025)
site_bar <- health_assess_2025 %>%
ggplot(aes(x = site_name)) +
geom_bar(aes(fill = site_name)) +
ylim(0, 80) +
geom_text(stat = "count", aes(label = ..count..), vjust = -0.5, size = 8) +  # size 8 ≈ 24 pt
xlab("Trees surveyed in 2025 by Site") +
ylab("# of individuals assessed")
# ggtitle("Individuals per Site", subtitle = paste("Total individuals:", total_individuals)) +
theme_minimal(base_size = 24) +  # base text size
theme(
axis.text = element_text(size = 24),
axis.title = element_text(size = 24),
legend.text = element_text(size = 24),
legend.title = element_text(size = 24),
plot.title = element_text(size = 28, face = "bold"),
plot.subtitle = element_text(size = 24)
)+ theme(legend.position = "none")
site_bar
total_individuals <- nrow(health_assess_2025)
site_bar <- health_assess_2025 %>%
ggplot(aes(x = site_name)) +
geom_bar(aes(fill = site_name)) +
ylim(0, 80) +
geom_text(stat = "count", aes(label = ..count..), vjust = -0.5, size = 8) +  # size 8 ≈ 24 pt
xlab("Trees surveyed in 2025 by Site") +
ylab("# of individuals assessed")
# ggtitle("Individuals per Site", subtitle = paste("Total individuals:", total_individuals)) +
theme_minimal(base_size = 24) +  # base text size
theme(
axis.text = element_text(size = 24),
axis.title = element_text(size = 24),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20),
plot.title = element_text(size = 28, face = "bold"),
plot.subtitle = element_text(size = 24)
)+ theme(legend.position = "none")
site_bar
install.packages("rinat")
setwd("~/")
author_vector <- read.csv("C:\Users\helmerhj\Desktop\PoPCites.csv")
author_vector <- read.csv("/Users/helmerhj/Desktop/PoPCites.csv")
author_vector <- read.csv("/Users/helmerhj/Desktop/PoPCites.csv")
View(author_vector)
author_vector <- author_vector %>% filter('authors')
library(tidyverse)
author_vector <- author_vector %>% filter('authors')
author_vector <- author_vector %>% select('authors')
author_vector <- author_vector %>% select("authors")
author_vector <- author_vector %>% select("Authors")
View(author_vector)
split_strings <- strsplit(author_vector, ",")
split_strings <- author_vector %>% strsplit(",")
split_strings <- strsplit(author_vector, ',')
split_strings <- strsplit(author_vector, ",")
split_strings <- str_split(author_vector, ",")
View(split_strings)
# Split the 'fruits' column into separate rows and then count frequencies
frequency_df <- author_vector %>%
separate_rows(Authors, sep = ",") %>%
count(fruits)
# Split the 'fruits' column into separate rows and then count frequencies
frequency_df <- author_vector %>%
separate_rows(Authors, sep = ",") %>%
count(Authors)
View(frequency_df)
# Print the frequency data frame
print(frequency_df)
library(stringr)
author_vector <- author_vector %>% mutate(Authors = str_trim(Authors))
# Split the 'fruits' column into separate rows and then count frequencies
frequency_df <- author_vector %>%
separate_rows(Authors, sep = ",") %>%
count(Authors)
# Print the frequency data frame
print(frequency_df)
author_vector <- author_vector %>% mutate(Authors = str_trim(Authors))
View(author_vector)
str_trim(Authors)
test <- author_vector %>% str_trim(Authors)
test <- author_vector %>% str_trim("Authors")
test <- author_vector %>% str_trim("both", "Authors")
test <- author_vector %>% str_squish("Authors")
#install.packages("rinat") # Package for working with iNaturalist
library(rinat)
library(tidyverse)
library(stringr)
author_vector <- read.csv("/Users/helmerhj/Desktop/PoPCites.csv")
author_vector <- author_vector %>% select("Authors")
author_vector <- author_vector %>% mutate("Authors" = str_trim(Authors))
# Split the 'fruits' column into separate rows and then count frequencies
frequency_df <- author_vector %>%
separate_rows(Authors, sep = ",") %>%
mutate(Authors = str_trim(Authors, side = "both")) %>%
mutate(author_vector = str_trim(author_vector, side = "both")) %>%
count(Authors)
# Print the frequency data frame
print(frequency_df)
View(frequency_df)
total_vector <- read.csv("/Users/helmerhj/Desktop/PoPCites.csv")
View(total_vector)
#install.packages("rinat") # Package for working with iNaturalist
library(rinat)
library(tidyverse)
library(stringr)
total_vector <- read.csv("/Users/helmerhj/Desktop/PoPCites.csv")
journal_vector <- total_vector %>% select("Source")
journal_vector <- journal_vector %>% mutate("Source" = str_trim(Source))
# Split the 'fruits' column into separate rows and then count frequencies
journal_frequency_df <- author_vector %>%
separate_rows(Authors, sep = ",") %>%
mutate(Source = str_trim(Source, side = "both")) %>%
mutate(journal_vector = str_trim(journal_vector, side = "both")) %>%
count(Source)
View(journal_vector)
# Split the 'fruits' column into separate rows and then count frequencies
journal_frequency_df <- author_vector %>%
separate_rows(journal_vector, sep = ",") %>%
mutate(Source = str_trim(Source, side = "both")) %>%
mutate(journal_vector = str_trim(journal_vector, side = "both")) %>%
count(Source)
# Split the 'fruits' column into separate rows and then count frequencies
journal_frequency_df <- author_vector %>%
#separate_rows(journal_vector, sep = ",") %>%
mutate(Source = str_trim(Source, side = "both")) %>%
mutate(journal_vector = str_trim(journal_vector, side = "both")) %>%
count(Source)
# Split the 'fruits' column into separate rows and then count frequencies
journal_frequency_df <- author_vector %>%
#separate_rows(journal_vector, sep = ",") %>%
mutate(Source = str_trim(Source, side = "both")) %>%
mutate(Source = str_trim(journal_vector, side = "both")) %>%
count(Source)
# Split the 'fruits' column into separate rows and then count frequencies
journal_frequency_df <- author_vector %>%
#separate_rows(journal_vector, sep = ",") %>%
mutate(Source = str_trim(Source, side = "both")) %>%
count(Source)
View(journal_vector)
# Split the 'fruits' column into separate rows and then count frequencies
journal_frequency_df <- author_vector %>%
#separate_rows(journal_vector, sep = ",") %>%
mutate("Source" = str_trim(Source, side = "both")) %>%
count("Source")
# Split the 'fruits' column into separate rows and then count frequencies
journal_frequency_df <- author_vector %>%
#separate_rows(journal_vector, sep = ",") %>%
#mutate("Source" = str_trim(Source, side = "both")) %>%
count("Source")
View(journal_frequency_df)
# Split the 'fruits' column into separate rows and then count frequencies
journal_frequency_df <- journal_vector %>%
separate_rows(journal_vector, sep = ",") %>%
mutate(Source = str_trim(Source, side = "both")) %>%
mutate(journal_vector = str_trim(journal_vector, side = "both")) %>%
count(Source)
# Split the 'fruits' column into separate rows and then count frequencies
journal_frequency_df <- journal_vector %>%
mutate(Source = str_trim(Source, side = "both")) %>%
mutate(journal_vector = str_trim(journal_vector, side = "both")) %>%
count(Source)
View(journal_frequency_df)
# Split the 'fruits' column into separate rows and then count frequencies
# 2. Remove the columns we don't use
health_assess_2025 <- health_assess_2025 %>% select(
## Basic information
-slope,
-aspect,
## Collections
-`What did you collect?`,
-`If VOUCHERS were collected, how many?`,
-`If LEAVES ON SILICA FOR DNA were collected, how many?`,
-`If CUTTINGS were collected, how many?`,
-`If SEEDS were collected, how many?`,
-`If other collections were made, please describe them here including the number collected.`
)
# 1. Import
source("C:/Users/helmerhj/Documents/GitHub/2025-reu-temp/data_cleaning/2025_August_Data_Preparing_Columns.R")
# 1. Import
source("C:/Users/helmerhj/Documents/GitHub/2025-reu-temp/data_cleaning/2025_August_Data_Preparing_Columns.R")
# 1. Import
source("C:/Users/helmerhj/Documents/GitHub/2025-reu-temp/data_cleaning/2025_August_Data_Preparing_Columns.R")
# 2. Remove the columns we don't use
health_assess_2025 <- health_assess_2025 %>% select(
## Basic information
-slope,
-aspect,
## Collections
-`What did you collect?`,
-`If VOUCHERS were collected, how many?`,
-`If LEAVES ON SILICA FOR DNA were collected, how many?`,
-`If CUTTINGS were collected, how many?`,
-`If SEEDS were collected, how many?`,
-`If other collections were made, please describe them here including the number collected.`
)
# 1. Import
source("data_cleaning/2025_August_Data_Preparing_Columns.R")
# 1. Import
source("data_cleaning/2025_August_Data_Preparing_Columns.R")
# 2. Remove the columns we don't use
health_assess_2025 <- health_assess_2025 %>% select(
## Basic information
-slope,
-aspect,
## Collections
-`What did you collect?`,
-`If VOUCHERS were collected, how many?`,
-`If LEAVES ON SILICA FOR DNA were collected, how many?`,
-`If CUTTINGS were collected, how many?`,
-`If SEEDS were collected, how many?`,
-`If other collections were made, please describe them here including the number collected.`
)
# 3. Select between the two dates of data collected with this version of the form
#    (June 2025 Version)
data_collection_began <- ymd_hms("2025-07-03 00:00:00") #7/3/2025 8:38:24
# Author: Hank Helmers
# Date: 08-28-2025, 09-13-2025
# Purpose: Prepare the data columns for use in analyses and review scripts.
#          This preparation mainly includes renaming and removal.
# Ref: > setwd("C:/Users/helmerhj/Documents/GitHub/2025-reu-temp")
# Imports essential packages
library(tidyverse) # Clarity in code writing
library(readr)
library(styler)
library(dplyr)     # Data selecting and filtering
library(lubridate) # For working with dates and times
# Imports all 2025 data
health_assess_2025 <- read_csv("data/2025_June_July_Butternut_Health_Assessment_Form_Responses.csv")
# Author: Hank Helmers
# Date: 08-28-2025, 09-13-2025
# Purpose: Prepare the data columns for use in analyses and review scripts.
#          This preparation mainly includes renaming and removal.
# Ref: > setwd("C:/Users/helmerhj/Documents/GitHub/2025-reu-temp")
# Imports essential packages
library(tidyverse) # Clarity in code writing
library(readr)
library(styler)
library(dplyr)     # Data selecting and filtering
library(lubridate) # For working with dates and times
# Imports all 2025 data
health_assess_2025 <- read_csv("data/2025_June_July_Butternut_Health_Assessment_Form_Responses.csv")
# Author: Hank Helmers
# Date: 08-28-2025, 09-13-2025
# Purpose: Prepare the data columns for use in analyses and review scripts.
#          This preparation mainly includes renaming and removal.
# Ref: > setwd("C:/Users/helmerhj/Documents/GitHub/2025-reu-temp")
# Imports essential packages
library(tidyverse) # Clarity in code writing
library(readr)
library(styler)
library(dplyr)     # Data selecting and filtering
library(lubridate) # For working with dates and times
# Imports all 2025 data
health_assess_2025 <- read_csv("data/2025_June_July_Butternut_Health_Assessment_Form_Responses.csv")
# Imports all 2025 data
health_assess_2025 <- read_csv("data/2025_June_July_Butternut_Health_Assessment_Form_Responses.csv")
# Remove columns created after May 2025
health_assess_2025 <- health_assess_2025 %>% select(1:60)
setwd("~/GitHub/2025-reu-temp")
# 1. Import
source("data_cleaning/2025_August_Data_Preparing_Columns.R")
# 2. Remove the columns we don't use
health_assess_2025 <- health_assess_2025 %>% select(
## Basic information
-slope,
-aspect,
## Collections
-`What did you collect?`,
-`If VOUCHERS were collected, how many?`,
-`If LEAVES ON SILICA FOR DNA were collected, how many?`,
-`If CUTTINGS were collected, how many?`,
-`If SEEDS were collected, how many?`,
-`If other collections were made, please describe them here including the number collected.`
)
View(health_assess_2025)
colnames(health_assess_2025)
