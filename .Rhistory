geom_bar(aes(fill = seedling_y_n)) +
theme_bw() +
geom_text(stat = "count", aes(label = ..count..), vjust = -0.5, size = 8) +  # size 8 ≈ 24 pt
xlab("2025 Seedlings Y/N")
bar_seedlings
bar_seedlings <- health_assess_2025 %>% ggplot(aes(x = seedling_y_n)) +
geom_bar(aes(fill = seedling_y_n)) +
theme_bw() +
ylim(0, 90) +
geom_text(stat = "count", aes(label = ..count..), vjust = -0.5, size = 8) +  # size 8 ≈ 24 pt
xlab("2025 Seedlings Y/N")
bar_seedlings
total_individuals <- nrow(health_assess_2025)
site_bar <- health_assess_2025 %>%
ggplot(aes(x = site_name)) +
geom_bar(aes(fill = site_name)) +
ylim(0, 80) +
geom_text(stat = "count", aes(label = ..count..), vjust = -0.5, size = 8) +  # size 8 ≈ 24 pt
xlab("Trees surveyed in 2025 by Site") +
# ggtitle("Individuals per Site", subtitle = paste("Total individuals:", total_individuals)) +
theme_minimal(base_size = 24) +  # base text size
theme(
axis.text = element_text(size = 24),
axis.title = element_text(size = 24),
legend.text = element_text(size = 24),
legend.title = element_text(size = 24),
plot.title = element_text(size = 28, face = "bold"),
plot.subtitle = element_text(size = 24)
)+ theme(legend.position = "none")
site_bar
total_individuals <- nrow(health_assess_2025)
site_bar <- health_assess_2025 %>%
ggplot(aes(x = site_name)) +
geom_bar(aes(fill = site_name)) +
ylim(0, 80) +
geom_text(stat = "count", aes(label = ..count..), vjust = -0.5, size = 8) +  # size 8 ≈ 24 pt
xlab("Trees surveyed in 2025 by Site") +
ylab("Number of individuals assessed")
# ggtitle("Individuals per Site", subtitle = paste("Total individuals:", total_individuals)) +
theme_minimal(base_size = 24) +  # base text size
theme(
axis.text = element_text(size = 24),
axis.title = element_text(size = 24),
legend.text = element_text(size = 24),
legend.title = element_text(size = 24),
plot.title = element_text(size = 28, face = "bold"),
plot.subtitle = element_text(size = 24)
)+ theme(legend.position = "none")
site_bar
total_individuals <- nrow(health_assess_2025)
site_bar <- health_assess_2025 %>%
ggplot(aes(x = site_name)) +
geom_bar(aes(fill = site_name)) +
ylim(0, 80) +
geom_text(stat = "count", aes(label = ..count..), vjust = -0.5, size = 8) +  # size 8 ≈ 24 pt
xlab("Trees surveyed in 2025 by Site") +
ylab("# of individuals assessed")
# ggtitle("Individuals per Site", subtitle = paste("Total individuals:", total_individuals)) +
theme_minimal(base_size = 24) +  # base text size
theme(
axis.text = element_text(size = 24),
axis.title = element_text(size = 24),
legend.text = element_text(size = 24),
legend.title = element_text(size = 24),
plot.title = element_text(size = 28, face = "bold"),
plot.subtitle = element_text(size = 24)
)+ theme(legend.position = "none")
site_bar
total_individuals <- nrow(health_assess_2025)
site_bar <- health_assess_2025 %>%
ggplot(aes(x = site_name)) +
geom_bar(aes(fill = site_name)) +
ylim(0, 80) +
geom_text(stat = "count", aes(label = ..count..), vjust = -0.5, size = 8) +  # size 8 ≈ 24 pt
xlab("Trees surveyed in 2025 by Site") +
ylab("# of individuals assessed")
# ggtitle("Individuals per Site", subtitle = paste("Total individuals:", total_individuals)) +
theme_minimal(base_size = 24) +  # base text size
theme(
axis.text = element_text(size = 24),
axis.title = element_text(size = 24),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20),
plot.title = element_text(size = 28, face = "bold"),
plot.subtitle = element_text(size = 24)
)+ theme(legend.position = "none")
site_bar
install.packages("rinat")
setwd("~/")
author_vector <- read.csv("C:\Users\helmerhj\Desktop\PoPCites.csv")
author_vector <- read.csv("/Users/helmerhj/Desktop/PoPCites.csv")
author_vector <- read.csv("/Users/helmerhj/Desktop/PoPCites.csv")
View(author_vector)
author_vector <- author_vector %>% filter('authors')
library(tidyverse)
author_vector <- author_vector %>% filter('authors')
author_vector <- author_vector %>% select('authors')
author_vector <- author_vector %>% select("authors")
author_vector <- author_vector %>% select("Authors")
View(author_vector)
split_strings <- strsplit(author_vector, ",")
split_strings <- author_vector %>% strsplit(",")
split_strings <- strsplit(author_vector, ',')
split_strings <- strsplit(author_vector, ",")
split_strings <- str_split(author_vector, ",")
View(split_strings)
# Split the 'fruits' column into separate rows and then count frequencies
frequency_df <- author_vector %>%
separate_rows(Authors, sep = ",") %>%
count(fruits)
# Split the 'fruits' column into separate rows and then count frequencies
frequency_df <- author_vector %>%
separate_rows(Authors, sep = ",") %>%
count(Authors)
View(frequency_df)
# Print the frequency data frame
print(frequency_df)
library(stringr)
author_vector <- author_vector %>% mutate(Authors = str_trim(Authors))
# Split the 'fruits' column into separate rows and then count frequencies
frequency_df <- author_vector %>%
separate_rows(Authors, sep = ",") %>%
count(Authors)
# Print the frequency data frame
print(frequency_df)
author_vector <- author_vector %>% mutate(Authors = str_trim(Authors))
View(author_vector)
str_trim(Authors)
test <- author_vector %>% str_trim(Authors)
test <- author_vector %>% str_trim("Authors")
test <- author_vector %>% str_trim("both", "Authors")
test <- author_vector %>% str_squish("Authors")
#install.packages("rinat") # Package for working with iNaturalist
library(rinat)
library(tidyverse)
library(stringr)
author_vector <- read.csv("/Users/helmerhj/Desktop/PoPCites.csv")
author_vector <- author_vector %>% select("Authors")
author_vector <- author_vector %>% mutate("Authors" = str_trim(Authors))
# Split the 'fruits' column into separate rows and then count frequencies
frequency_df <- author_vector %>%
separate_rows(Authors, sep = ",") %>%
mutate(Authors = str_trim(Authors, side = "both")) %>%
mutate(author_vector = str_trim(author_vector, side = "both")) %>%
count(Authors)
# Print the frequency data frame
print(frequency_df)
View(frequency_df)
total_vector <- read.csv("/Users/helmerhj/Desktop/PoPCites.csv")
View(total_vector)
#install.packages("rinat") # Package for working with iNaturalist
library(rinat)
library(tidyverse)
library(stringr)
total_vector <- read.csv("/Users/helmerhj/Desktop/PoPCites.csv")
journal_vector <- total_vector %>% select("Source")
journal_vector <- journal_vector %>% mutate("Source" = str_trim(Source))
# Split the 'fruits' column into separate rows and then count frequencies
journal_frequency_df <- author_vector %>%
separate_rows(Authors, sep = ",") %>%
mutate(Source = str_trim(Source, side = "both")) %>%
mutate(journal_vector = str_trim(journal_vector, side = "both")) %>%
count(Source)
View(journal_vector)
# Split the 'fruits' column into separate rows and then count frequencies
journal_frequency_df <- author_vector %>%
separate_rows(journal_vector, sep = ",") %>%
mutate(Source = str_trim(Source, side = "both")) %>%
mutate(journal_vector = str_trim(journal_vector, side = "both")) %>%
count(Source)
# Split the 'fruits' column into separate rows and then count frequencies
journal_frequency_df <- author_vector %>%
#separate_rows(journal_vector, sep = ",") %>%
mutate(Source = str_trim(Source, side = "both")) %>%
mutate(journal_vector = str_trim(journal_vector, side = "both")) %>%
count(Source)
# Split the 'fruits' column into separate rows and then count frequencies
journal_frequency_df <- author_vector %>%
#separate_rows(journal_vector, sep = ",") %>%
mutate(Source = str_trim(Source, side = "both")) %>%
mutate(Source = str_trim(journal_vector, side = "both")) %>%
count(Source)
# Split the 'fruits' column into separate rows and then count frequencies
journal_frequency_df <- author_vector %>%
#separate_rows(journal_vector, sep = ",") %>%
mutate(Source = str_trim(Source, side = "both")) %>%
count(Source)
View(journal_vector)
# Split the 'fruits' column into separate rows and then count frequencies
journal_frequency_df <- author_vector %>%
#separate_rows(journal_vector, sep = ",") %>%
mutate("Source" = str_trim(Source, side = "both")) %>%
count("Source")
# Split the 'fruits' column into separate rows and then count frequencies
journal_frequency_df <- author_vector %>%
#separate_rows(journal_vector, sep = ",") %>%
#mutate("Source" = str_trim(Source, side = "both")) %>%
count("Source")
View(journal_frequency_df)
# Split the 'fruits' column into separate rows and then count frequencies
journal_frequency_df <- journal_vector %>%
separate_rows(journal_vector, sep = ",") %>%
mutate(Source = str_trim(Source, side = "both")) %>%
mutate(journal_vector = str_trim(journal_vector, side = "both")) %>%
count(Source)
# Split the 'fruits' column into separate rows and then count frequencies
journal_frequency_df <- journal_vector %>%
mutate(Source = str_trim(Source, side = "both")) %>%
mutate(journal_vector = str_trim(journal_vector, side = "both")) %>%
count(Source)
View(journal_frequency_df)
library(lubridate)
# Data Cleaning of May Form 2025 (Dates June 5th and 6th, 2025)
# This script organized the inconsistencies across the Butternut Health Assessment data
#
# The responses aligned with the JUNE Version of the form
# Dates June 12th to July 2nd, 2025 EOD.
# Rows: 18 – 71
# 1. Import
source("C:/Users/helmerhj/Documents/GitHub/2025-reu-temp/data_cleaning/2025_August_Data_Preparing_Columns.R")
setwd("~/GitHub/2025-reu-temp")
library(lubridate)
# Data Cleaning of May Form 2025 (Dates June 5th and 6th, 2025)
# This script organized the inconsistencies across the Butternut Health Assessment data
#
# The responses aligned with the JUNE Version of the form
# Dates June 12th to July 2nd, 2025 EOD.
# Rows: 18 – 71
# 1. Import
source("C:/Users/helmerhj/Documents/GitHub/2025-reu-temp/data_cleaning/2025_August_Data_Preparing_Columns.R")
# 2. Remove the columns we don't use
health_assess_2025 <- health_assess_2025 %>% select(
## Basic information
-slope,
-aspect,
## Collections
-`What did you collect?`,
-`If VOUCHERS were collected, how many?`,
-`If LEAVES ON SILICA FOR DNA were collected, how many?`,
-`If CUTTINGS were collected, how many?`,
-`If SEEDS were collected, how many?`,
-`If other collections were made, please describe them here including the number collected.`
)
# 3. Select between the two dates of data collected with this version of the form
#    (June 2025 Version)
data_collection_began <- ymd_hms("2025-06-12 00:00:00")
data_collection_end <- ymd_hms("2025-07-02 23:59:59")
june_2025 <- health_assess_2025 %>% filter(
between(Timestamp, data_collection_began, data_collection_end)
)
# Focus in on the photo columns only
june_photos <- june_2025 %>% select(
Timestamp, site_name, plant_number,  # Identifiable info
Camera, first_photo, last_photo      # Photo info
)
# Remove test entries & black walnut entry
test_entry_1 = ymd_hms("2025-07-02 09:41:40") # "Fake site - practice entry"
black_walnut = ymd_hms("2025-06-19 10:46:22") # "this is black walnut!"
test_entries = c(test_entry_1, black_walnut)
june_photos <- june_photos %>% filter(Timestamp != test_entries)
# 4. Specialized cleaning for this time period
#   a. Combining seperate SH37 observations into a single photo group
#      Emma and I took multiple form observations on this tree due to
#      its special circumstances. However, as far as the photos are
#      concerned, there is only one set of photos.
#
#      In this case, simply removing the other two entries is the simplest option.
june_photos <- june_photos %>% filter(plant_number != "SH37")
#   b. Seperating the camera from the first photo information
june_photos <- june_photos %>% mutate(mixed_data = first_photo)
# Seperate the camera
df_separated <- june_photos %>% separate_rows(mixed_data, sep=" ")
# Step 3: Classify pieces
df_classified <- df_separated %>%
mutate(
Camera = if_else(str_detect(mixed_data, "^[0-9]+$"), NA_character_, mixed_data),
first_photo = if_else(str_detect(mixed_data, "^[0-9]+$"), mixed_data, NA_character_)
)
# Step 4: Recombine by last_photo
df_cleaned <- df_classified %>%
group_by(plant_number) %>%
summarise(
Camera      = str_c(na.omit(Camera), collapse = " "),
first_photo = str_c(na.omit(first_photo), collapse = " "),
)
df_cleaned <- left_join(df_cleaned, june_photos, by = "plant_number")
View(june_2025)
View(june_photos)
View(df_separated)
View(df_classified)
View(df_cleaned)
library(lubridate)
# Data Cleaning of May Form 2025 (Dates June 5th and 6th, 2025)
# This script organized the inconsistencies across the Butternut Health Assessment data
#
# The responses aligned with the JUNE Version of the form
# Dates July 3rd to August 6th EOD. (All the photos through August data collection)
# Rows: 73-174
# 1. Import
source("C:/Users/helmerhj/Documents/GitHub/2025-reu-temp/data_cleaning/2025_August_Data_Preparing_Columns.R")
# 2. Remove the columns we don't use
health_assess_2025 <- health_assess_2025 %>% select(
## Basic information
-slope,
-aspect,
## Collections
-`What did you collect?`,
-`If VOUCHERS were collected, how many?`,
-`If LEAVES ON SILICA FOR DNA were collected, how many?`,
-`If CUTTINGS were collected, how many?`,
-`If SEEDS were collected, how many?`,
-`If other collections were made, please describe them here including the number collected.`
)
# 3. Select between the two dates of data collected with this version of the form
#    (June 2025 Version)
data_collection_began <- ymd_hms("2025-07-03 00:00:00") #7/3/2025 8:38:24
data_collection_end <- ymd_hms("2025-08-06 23:59:59")   # 8/6/2025 15:38:19
july_2025 <- health_assess_2025 %>% filter(
between(Timestamp, data_collection_began, data_collection_end)
)
# Focus in on the photo columns only
july_2025 <- june_2025 %>% select(
Timestamp, site_name, plant_number,  # Identifiable info
Camera, first_photo, last_photo      # Photo info
)
july_2025 <- july_2025 %>% filter(Timestamp != test_entries)
# 4. Specialized cleaning for this time period
#   a. Combining seperate SH37 observations into a single photo group
#      Emma and I took multiple form observations on this tree due to
#      its special circumstances. However, as far as the photos are
#      concerned, there is only one set of photos.
#
#      In this case, simply removing the other two entries is the simplest option.
View(july_2025)
library(lubridate)
# Data Cleaning of May Form 2025 (Dates June 5th and 6th, 2025)
# This script organized the inconsistencies across the Butternut Health Assessment data
#
# The responses aligned with the JUNE Version of the form
# Dates July 3rd to August 6th EOD. (All the photos through August data collection)
# Rows: 73-174
# 1. Import
source("C:/Users/helmerhj/Documents/GitHub/2025-reu-temp/data_cleaning/2025_August_Data_Preparing_Columns.R")
# 2. Remove the columns we don't use
health_assess_2025 <- health_assess_2025 %>% select(
## Basic information
-slope,
-aspect,
## Collections
-`What did you collect?`,
-`If VOUCHERS were collected, how many?`,
-`If LEAVES ON SILICA FOR DNA were collected, how many?`,
-`If CUTTINGS were collected, how many?`,
-`If SEEDS were collected, how many?`,
-`If other collections were made, please describe them here including the number collected.`
)
# 3. Select between the two dates of data collected with this version of the form
#    (June 2025 Version)
data_collection_began <- ymd_hms("2025-07-03 00:00:00") #7/3/2025 8:38:24
data_collection_end <- ymd_hms("2025-08-06 23:59:59")   # 8/6/2025 15:38:19
july_2025 <- health_assess_2025 %>% filter(
between(Timestamp, data_collection_began, data_collection_end)
)
# Focus in on the photo columns only
july_2025 <- june_2025 %>% select(
Timestamp, site_name, plant_number,  # Identifiable info
Camera, first_photo, last_photo      # Photo info
)
library(lubridate)
# Data Cleaning of May Form 2025 (Dates June 5th and 6th, 2025)
# This script organized the inconsistencies across the Butternut Health Assessment data
#
# The responses aligned with the JUNE Version of the form
# Dates July 3rd to August 6th EOD. (All the photos through August data collection)
# Rows: 73-174
# 1. Import
source("C:/Users/helmerhj/Documents/GitHub/2025-reu-temp/data_cleaning/2025_August_Data_Preparing_Columns.R")
# 2. Remove the columns we don't use
health_assess_2025 <- health_assess_2025 %>% select(
## Basic information
-slope,
-aspect,
## Collections
-`What did you collect?`,
-`If VOUCHERS were collected, how many?`,
-`If LEAVES ON SILICA FOR DNA were collected, how many?`,
-`If CUTTINGS were collected, how many?`,
-`If SEEDS were collected, how many?`,
-`If other collections were made, please describe them here including the number collected.`
)
# 3. Select between the two dates of data collected with this version of the form
#    (June 2025 Version)
data_collection_began <- ymd_hms("2025-07-03 00:00:00") #7/3/2025 8:38:24
data_collection_end <- ymd_hms("2025-08-06 23:59:59")   # 8/6/2025 15:38:19
july_2025 <- health_assess_2025 %>% filter(
between(Timestamp, data_collection_began, data_collection_end)
)
# Focus in on the photo columns only
july_2025 <- july_2025 %>% select(
Timestamp, site_name, plant_number,  # Identifiable info
Camera, first_photo, last_photo      # Photo info
)
july_2025 <- july_2025 %>% filter(Timestamp != test_entries)
library(lubridate)
# Data Cleaning of May Form 2025 (Dates June 5th and 6th, 2025)
# This script organized the inconsistencies across the Butternut Health Assessment data
#
# The responses aligned with the JUNE Version of the form
# Dates July 3rd to August 6th EOD. (All the photos through August data collection)
# Rows: 73-174
# 1. Import
source("C:/Users/helmerhj/Documents/GitHub/2025-reu-temp/data_cleaning/2025_August_Data_Preparing_Columns.R")
# 2. Remove the columns we don't use
health_assess_2025 <- health_assess_2025 %>% select(
## Basic information
-slope,
-aspect,
## Collections
-`What did you collect?`,
-`If VOUCHERS were collected, how many?`,
-`If LEAVES ON SILICA FOR DNA were collected, how many?`,
-`If CUTTINGS were collected, how many?`,
-`If SEEDS were collected, how many?`,
-`If other collections were made, please describe them here including the number collected.`
)
# 3. Select between the two dates of data collected with this version of the form
#    (June 2025 Version)
data_collection_began <- ymd_hms("2025-07-03 00:00:00") #7/3/2025 8:38:24
data_collection_end <- ymd_hms("2025-08-06 23:59:59")   # 8/6/2025 15:38:19
july_2025 <- health_assess_2025 %>% filter(
between(Timestamp, data_collection_began, data_collection_end)
)
# Focus in on the photo columns only
july_2025 <- july_2025 %>% select(
Timestamp, site_name, plant_number,  # Identifiable info
Camera, first_photo, last_photo      # Photo info
)
# 4. Specialized cleaning for this time period
#   a. Combining seperate SH37 observations into a single photo group
#      Emma and I took multiple form observations on this tree due to
#      its special circumstances. However, as far as the photos are
#      concerned, there is only one set of photos.
#
#      In this case, simply removing the other two entries is the simplest option.
View(july_2025)
library(lubridate)
# Data Cleaning of May Form 2025 (Dates June 5th and 6th, 2025)
# This script organized the inconsistencies across the Butternut Health Assessment data
#
# The responses aligned with the JUNE Version of the form
# Dates June 12th to July 2nd, 2025 EOD.
# Rows: 18 – 71
# 1. Import
source("C:/Users/helmerhj/Documents/GitHub/2025-reu-temp/data_cleaning/2025_August_Data_Preparing_Columns.R")
# 2. Remove the columns we don't use
health_assess_2025 <- health_assess_2025 %>% select(
## Basic information
-slope,
-aspect,
## Collections
-`What did you collect?`,
-`If VOUCHERS were collected, how many?`,
-`If LEAVES ON SILICA FOR DNA were collected, how many?`,
-`If CUTTINGS were collected, how many?`,
-`If SEEDS were collected, how many?`,
-`If other collections were made, please describe them here including the number collected.`
)
# 3. Select between the two dates of data collected with this version of the form
#    (June 2025 Version)
data_collection_began <- ymd_hms("2025-06-12 00:00:00")
data_collection_end <- ymd_hms("2025-07-02 23:59:59")
june_2025 <- health_assess_2025 %>% filter(
between(Timestamp, data_collection_began, data_collection_end)
)
# Focus in on the photo columns only
june_photos <- june_2025 %>% select(
Timestamp, site_name, plant_number,  # Identifiable info
Camera, first_photo, last_photo      # Photo info
)
# Remove test entries & black walnut entry
test_entry_1 = ymd_hms("2025-07-02 09:41:40") # "Fake site - practice entry"
black_walnut = ymd_hms("2025-06-19 10:46:22") # "this is black walnut!"
test_entries = c(test_entry_1, black_walnut)
june_photos <- june_photos %>% filter(Timestamp != test_entries)
# 4. Specialized cleaning for this time period
#   a. Combining seperate SH37 observations into a single photo group
#      Emma and I took multiple form observations on this tree due to
#      its special circumstances. However, as far as the photos are
#      concerned, there is only one set of photos.
#
#      In this case, simply removing the other two entries is the simplest option.
june_photos <- june_photos %>% filter(plant_number != "SH37")
#   b. Seperating the camera from the first photo information
june_photos <- june_photos %>% mutate(mixed_data = first_photo)
# Seperate the camera
df_separated <- june_photos %>% separate_rows(mixed_data, sep=" ")
# Step 3: Classify pieces
df_classified <- df_separated %>%
mutate(
Camera = if_else(str_detect(mixed_data, "^[0-9]+$"), NA_character_, mixed_data),
first_photo = if_else(str_detect(mixed_data, "^[0-9]+$"), mixed_data, NA_character_)
)
# Step 4: Recombine by last_photo
df_cleaned <- df_classified %>%
group_by(plant_number) %>%
summarise(
Camera      = str_c(na.omit(Camera), collapse = " "),
first_photo = str_c(na.omit(first_photo), collapse = " "),
)
df_cleaned <- left_join(df_cleaned, june_photos, by = "plant_number")
View(june_photos)
View(df_cleaned)
